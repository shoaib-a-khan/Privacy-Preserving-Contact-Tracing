#include <iostream>
#include <cstdint>
#include <stdio.h>
#include <sodium.h>
#include <string.h>
#include <math.h>
#include <vector>
#include <fstream>
#include <chrono>
#include "user.h"
#include "store.h"
#include "gov.h"

#define USER_COUNT 2500 //modify this number to change the number of users in the system.

int main(void)
{
    if (sodium_init() < 0)
    {
        /* panic! the library couldn't be initialized, it is not safe to use */
        std::cout << "Error initializing libsodium!\n";
    }

    Gov G;
    std::vector<User> Users;
    Store s(1);
    std::ofstream fout;
    fout.open("Contact_Tracing_Results.txt", std::ios_base::app);       //runtimes and communication costs are dumped here.
    fout<<"Probability of Proximity between any 2 users X & Y: 20%"<<std::endl;
    fout<<"Percentage of Users Initially Infected: 10%"<<std::endl;
    fout << "\nUser Count: " << USER_COUNT << std::endl;

    /*Creating users and enrolling them in the system*/
    for (int i = 1; i <= USER_COUNT; i++)
    {
        User u(i);
        u.GenerateEnrollmentKeys();
        std::pair<unsigned int, std::vector<unsigned char>> uei;
        uei = u.GetUserEnrollmentInfo();
        s.EnrollUser(uei.first, uei.second);
        Users.push_back(u);
    }

    /*Creating Delta - the proximity list generated by cctv infrastructure*/
    std::vector<std::pair<unsigned int, std::vector<unsigned int>>> ProximityList;
    for (int i = 0; i < Users.size(); i++)
    {
        std::pair<unsigned int, std::vector<unsigned int>> PerUserProximityList;
        PerUserProximityList.first = Users[i].GetID();
        for (int j = 0; j < Users.size(); j++)
        {
            uint32_t r = randombytes_uniform(pow(2, 32) - 1);
            if (r % 5 == 0 && j != i)   //use r mod 10 for 10% or r mod 5 for 20% chance of users X, Y crossing paths
                PerUserProximityList.second.push_back(Users[j].GetID());
        }
        ProximityList.push_back(PerUserProximityList);
    }
    s.InitProximityList(ProximityList);
    auto start = std::chrono::high_resolution_clock::now();
    s.DeriveRiskList();     //deriving list L_j from Delta
    auto stop = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);
    fout << "Store's Time to Compute List L: " << duration.count() / 1000000.0 << " s" << std::endl;

    /* Generating a list of Known Infected users*/
    std::vector<unsigned int> Infected;
    for (int i = 0; i < Users.size(); i++)
    {
        uint32_t r = randombytes_uniform(pow(2, 32) - 1);
        if (r % 10 == 0) //use r mod 10 for 10% of user population or r mod 20 for 5% of user population.
            Infected.push_back(Users[i].GetID());
    }
    G.InitKnownInfected(Infected);
    start = std::chrono::high_resolution_clock::now();
    G.ComputeSetGamma();
    stop = std::chrono::high_resolution_clock::now();
    duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);
    fout << "Gov's Time to Compute Set Gamma: " << duration.count() / 1000000.0 << " s" << std::endl;
    start = std::chrono::high_resolution_clock::now();
    G.DeriveRiskList(s.GetRiskList());
    stop = std::chrono::high_resolution_clock::now();
    duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);
    fout << "Gov's Time to Derive Risk List: " << duration.count() / 1000000.0 << " s" << std::endl;
    fout << "Store to Gov Communication Cost: " << 3 * 32 * (s.GetRiskList().size()) << " bytes" << std::endl;

    return 0;
}